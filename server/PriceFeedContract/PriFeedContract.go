// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PriceFeedContract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PriceFeedContractMetaData contains all meta data concerning the PriceFeedContract contract.
var PriceFeedContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"}],\"name\":\"PriceNotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"TooManyAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePerAsset\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"assets\",\"type\":\"bytes32[]\"}],\"name\":\"PricesRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"TrustedSignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePerAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePerAsset\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_assets\",\"type\":\"bytes32[]\"},{\"internalType\":\"function(uint8[],uint256[])external\",\"name\":\"_callback\",\"type\":\"function\"}],\"name\":\"requestPrices\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePerAsset\",\"type\":\"uint256\"}],\"name\":\"setFeePerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"setTrustedSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_assets\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f80fd5b5061005161005660201b60201c565b6101e5565b5f60019054906101000a900460ff16156100a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009c90610193565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff16146101115760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff60405161010891906101cc565b60405180910390a15b565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f61017d602783610113565b915061018882610123565b604082019050919050565b5f6020820190508181035f8301526101aa81610171565b9050919050565b5f60ff82169050919050565b6101c6816101b1565b82525050565b5f6020820190506101df5f8301846101bd565b92915050565b608051612a986102195f395f81816103aa01528181610438015281816105e60152818161067401526107230152612a985ff3fe608060405260043610610101575f3560e01c80636eefe8fa11610094578063b2ad4c2e11610063578063b2ad4c2e146102ea578063e18e07cf14610306578063f2fde38b1461032e578063f74d548014610356578063fe4b84df1461038057610108565b80636eefe8fa146102585780636f1518f814610282578063715018a6146102aa5780638da5cb5b146102c057610108565b806356a1c701116100d057806356a1c7011461018e5780635c975abb146101b65780635f18aa0c146101e057806360846bc61461021c57610108565b80633659cfe61461010a5780633ccfd60b146101325780634f1ef2861461014857806352d1902d1461016457610108565b3661010857005b005b348015610115575f80fd5b50610130600480360381019061012b91906118d9565b6103a8565b005b34801561013d575f80fd5b5061014661052e565b005b610162600480360381019061015d9190611a40565b6105e4565b005b34801561016f575f80fd5b50610178610720565b6040516101859190611ab2565b60405180910390f35b348015610199575f80fd5b506101b460048036038101906101af91906118d9565b6107d7565b005b3480156101c1575f80fd5b506101ca6108bf565b6040516101d79190611ae5565b60405180910390f35b3480156101eb575f80fd5b5061020660048036038101906102019190611b28565b6108d4565b6040516102139190611b6e565b60405180910390f35b348015610227575f80fd5b50610242600480360381019061023d9190611b28565b6108f2565b60405161024f9190611b9f565b60405180910390f35b348015610263575f80fd5b5061026c610908565b6040516102799190611b9f565b60405180910390f35b34801561028d575f80fd5b506102a860048036038101906102a39190611be2565b61090f565b005b3480156102b5575f80fd5b506102be610959565b005b3480156102cb575f80fd5b506102d461096c565b6040516102e19190611c1c565b60405180910390f35b61030460048036038101906102ff9190611d55565b610994565b005b348015610311575f80fd5b5061032c60048036038101906103279190611e61565b610c45565b005b348015610339575f80fd5b50610354600480360381019061034f91906118d9565b610d58565b005b348015610361575f80fd5b5061036a610dda565b6040516103779190611c1c565b60405180910390f35b34801561038b575f80fd5b506103a660048036038101906103a19190611be2565b610e00565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d90611f91565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610475610f59565b73ffffffffffffffffffffffffffffffffffffffff16146104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c29061201f565b60405180910390fd5b6104d481610fac565b61052b815f67ffffffffffffffff8111156104f2576104f161191c565b5b6040519080825280601f01601f1916602001820160405280156105245781602001600182028036833780820191505090505b505f610fb7565b50565b610536611121565b5f4790505f61054361096c565b73ffffffffffffffffffffffffffffffffffffffff16826040516105669061206a565b5f6040518083038185875af1925050503d805f81146105a0576040519150601f19603f3d011682016040523d82523d5f602084013e6105a5565b606091505b50509050806105e0576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066990611f91565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106b1610f59565b73ffffffffffffffffffffffffffffffffffffffff1614610707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fe9061201f565b60405180910390fd5b61071082610fac565b61071c82826001610fb7565b5050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a6906120ee565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b6107df611121565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610844576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061012d5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fced828023e9f94aa2a4373d4254f9bab903a9b34b822ab716d6c3688b2d0e17b816040516108b49190611c1c565b60405180910390a150565b5f60975f9054906101000a900460ff16905090565b610130602052805f5260405f205f915054906101000a900460ff1681565b61012f602052805f5260405f205f915090505481565b61012e5481565b610917611121565b8061012e819055507f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c768160405161094e9190611b9f565b60405180910390a150565b610961611121565b61096a5f61119f565b565b5f60655f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61099c611262565b6109a46112b1565b60648484905011156109f3578383905060646040517f399c20d10000000000000000000000000000000000000000000000000000000081526004016109ea92919061210c565b60405180910390fd5b5f8484905067ffffffffffffffff811115610a1157610a1061191c565b5b604051908082528060200260200182016040528015610a3f5781602001602082028036833780820191505090505b5090505f8585905067ffffffffffffffff811115610a6057610a5f61191c565b5b604051908082528060200260200182016040528015610a8e5781602001602082028036833780820191505090505b5090505f610aab8787905061012e546112fb90919063ffffffff16565b905080341015610ae7576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b87879050811015610be5575f888883818110610b0857610b07612133565b5b9050602002013590505f61012f5f8381526020019081526020015f205490505f6101305f8481526020019081526020015f205f9054906101000a900460ff1690505f8203610b8d57826040517ff69cc810000000000000000000000000000000000000000000000000000000008152600401610b849190611ab2565b60405180910390fd5b80878581518110610ba157610ba0612133565b5b602002602001019060ff16908160ff168152505081868581518110610bc957610bc8612133565b5b6020026020010181815250508380600101945050505050610ae9565b50848484846040518363ffffffff1660e01b8152600401610c079291906122ce565b5f604051808303815f87803b158015610c1e575f80fd5b505af1158015610c30573d5f803e3d5ffd5b50505050505050610c3f611310565b50505050565b610c4d6112b1565b5f8686905090505f5b81811015610d4e575f888883818110610c7257610c71612133565b5b9050602002013590505f878784818110610c8f57610c8e612133565b5b9050602002016020810190610ca4919061232d565b90505f868685818110610cba57610cb9612133565b5b905060200201359050816101305f8581526020019081526020015f205f6101000a81548160ff021916908360ff1602179055508061012f5f8581526020019081526020015f2081905550827f8c62fe32113aae6ed87fdea7c7da35e9d2b99790bf4f577b0869fe9bbe12d58f8284604051610d36929190612358565b60405180910390a28380600101945050505050610c56565b5050505050505050565b610d60611121565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc5906123ef565b60405180910390fd5b610dd78161119f565b50565b61012d5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8060019054906101000a900460ff16159050808015610e2f575060015f8054906101000a900460ff1660ff16105b80610e5b5750610e3e30611319565b158015610e5a575060015f8054906101000a900460ff1660ff16145b5b610e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e919061247d565b60405180910390fd5b60015f806101000a81548160ff021916908360ff1602179055508015610ed55760015f60016101000a81548160ff0219169083151502179055505b610edd61133b565b610ee5611393565b610eed6113eb565b610ef561143b565b8161012e819055508015610f55575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610f4c91906124dd565b60405180910390a15b5050565b5f610f857f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611493565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fb4611121565b50565b610fe27f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435f1b61149c565b5f015f9054906101000a900460ff161561100457610fff836114a5565b61111c565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561106c57506040513d601f19601f82011682018060405250810190611069919061250a565b60015b6110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a2906125a5565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b811461110f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110690612633565b60405180910390fd5b5061111b83838361155b565b5b505050565b611129611586565b73ffffffffffffffffffffffffffffffffffffffff1661114761096c565b73ffffffffffffffffffffffffffffffffffffffff161461119d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111949061269b565b60405180910390fd5b565b5f60655f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160655f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600154036112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90612703565b60405180910390fd5b6002600181905550565b6112b96108bf565b156112f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f09061276b565b60405180910390fd5b565b5f818361130891906127b6565b905092915050565b60018081905550565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff16611389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138090612867565b60405180910390fd5b61139161158d565b565b5f60019054906101000a900460ff166113e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d890612867565b60405180910390fd5b6113e96115ed565b565b5f60019054906101000a900460ff16611439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143090612867565b60405180910390fd5b565b5f60019054906101000a900460ff16611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090612867565b60405180910390fd5b611491611644565b565b5f819050919050565b5f819050919050565b6114ae81611319565b6114ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e4906128f5565b60405180910390fd5b806115197f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611493565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611564836116ad565b5f825111806115705750805b156115815761157f83836116fc565b505b505050565b5f33905090565b5f60019054906101000a900460ff166115db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d290612867565b60405180910390fd5b6115eb6115e6611586565b61119f565b565b5f60019054906101000a900460ff1661163b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163290612867565b60405180910390fd5b60018081905550565b5f60019054906101000a900460ff16611692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168990612867565b60405180910390fd5b5f60975f6101000a81548160ff021916908315150217905550565b6116b6816114a5565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606117218383604051806060016040528060278152602001612a3c60279139611729565b905092915050565b60605f808573ffffffffffffffffffffffffffffffffffffffff1685604051611752919061295b565b5f60405180830381855af49150503d805f811461178a576040519150601f19603f3d011682016040523d82523d5f602084013e61178f565b606091505b50915091506117a0868383876117ab565b925050509392505050565b6060831561180c575f835103611804576117c485611319565b611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa906129bb565b60405180910390fd5b5b829050611817565b611816838361181f565b5b949350505050565b5f825111156118315781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118659190612a1b565b60405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6118a88261187f565b9050919050565b6118b88161189e565b81146118c2575f80fd5b50565b5f813590506118d3816118af565b92915050565b5f602082840312156118ee576118ed611877565b5b5f6118fb848285016118c5565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6119528261190c565b810181811067ffffffffffffffff821117156119715761197061191c565b5b80604052505050565b5f61198361186e565b905061198f8282611949565b919050565b5f67ffffffffffffffff8211156119ae576119ad61191c565b5b6119b78261190c565b9050602081019050919050565b828183375f83830152505050565b5f6119e46119df84611994565b61197a565b905082815260208101848484011115611a00576119ff611908565b5b611a0b8482856119c4565b509392505050565b5f82601f830112611a2757611a26611904565b5b8135611a378482602086016119d2565b91505092915050565b5f8060408385031215611a5657611a55611877565b5b5f611a63858286016118c5565b925050602083013567ffffffffffffffff811115611a8457611a8361187b565b5b611a9085828601611a13565b9150509250929050565b5f819050919050565b611aac81611a9a565b82525050565b5f602082019050611ac55f830184611aa3565b92915050565b5f8115159050919050565b611adf81611acb565b82525050565b5f602082019050611af85f830184611ad6565b92915050565b611b0781611a9a565b8114611b11575f80fd5b50565b5f81359050611b2281611afe565b92915050565b5f60208284031215611b3d57611b3c611877565b5b5f611b4a84828501611b14565b91505092915050565b5f60ff82169050919050565b611b6881611b53565b82525050565b5f602082019050611b815f830184611b5f565b92915050565b5f819050919050565b611b9981611b87565b82525050565b5f602082019050611bb25f830184611b90565b92915050565b611bc181611b87565b8114611bcb575f80fd5b50565b5f81359050611bdc81611bb8565b92915050565b5f60208284031215611bf757611bf6611877565b5b5f611c0484828501611bce565b91505092915050565b611c168161189e565b82525050565b5f602082019050611c2f5f830184611c0d565b92915050565b5f80fd5b5f80fd5b5f8083601f840112611c5257611c51611904565b5b8235905067ffffffffffffffff811115611c6f57611c6e611c35565b5b602083019150836020820283011115611c8b57611c8a611c39565b5b9250929050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082169050919050565b5f611cc782611c92565b9050919050565b611cd781611cbd565b8114611ce1575f80fd5b50565b5f81359050611cf281611cce565b92915050565b5f8160201c9050919050565b5f8160401c9050919050565b5f80611d1b83611d04565b925063ffffffff83169050611d2f83611cf8565b9150915091565b5f80611d4a611d458585611ce4565b611d10565b915091509250929050565b5f805f8060408587031215611d6d57611d6c611877565b5b5f85013567ffffffffffffffff811115611d8a57611d8961187b565b5b611d9687828801611c3d565b94509450506020611da987828801611d36565b925092505092959194509250565b5f8083601f840112611dcc57611dcb611904565b5b8235905067ffffffffffffffff811115611de957611de8611c35565b5b602083019150836020820283011115611e0557611e04611c39565b5b9250929050565b5f8083601f840112611e2157611e20611904565b5b8235905067ffffffffffffffff811115611e3e57611e3d611c35565b5b602083019150836020820283011115611e5a57611e59611c39565b5b9250929050565b5f805f805f8060608789031215611e7b57611e7a611877565b5b5f87013567ffffffffffffffff811115611e9857611e9761187b565b5b611ea489828a01611c3d565b9650965050602087013567ffffffffffffffff811115611ec757611ec661187b565b5b611ed389828a01611db7565b9450945050604087013567ffffffffffffffff811115611ef657611ef561187b565b5b611f0289828a01611e0c565b92509250509295509295509295565b5f82825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b5f611f7b602c83611f11565b9150611f8682611f21565b604082019050919050565b5f6020820190508181035f830152611fa881611f6f565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b5f612009602c83611f11565b915061201482611faf565b604082019050919050565b5f6020820190508181035f83015261203681611ffd565b9050919050565b5f81905092915050565b50565b5f6120555f8361203d565b915061206082612047565b5f82019050919050565b5f6120748261204a565b9150819050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c5f8201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b5f6120d8603883611f11565b91506120e38261207e565b604082019050919050565b5f6020820190508181035f830152612105816120cc565b9050919050565b5f60408201905061211f5f830185611b90565b61212c6020830184611b90565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61219281611b53565b82525050565b5f6121a38383612189565b60208301905092915050565b5f602082019050919050565b5f6121c582612160565b6121cf818561216a565b93506121da8361217a565b805f5b8381101561220a5781516121f18882612198565b97506121fc836121af565b9250506001810190506121dd565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61224981611b87565b82525050565b5f61225a8383612240565b60208301905092915050565b5f602082019050919050565b5f61227c82612217565b6122868185612221565b935061229183612231565b805f5b838110156122c15781516122a8888261224f565b97506122b383612266565b925050600181019050612294565b5085935050505092915050565b5f6040820190508181035f8301526122e681856121bb565b905081810360208301526122fa8184612272565b90509392505050565b61230c81611b53565b8114612316575f80fd5b50565b5f8135905061232781612303565b92915050565b5f6020828403121561234257612341611877565b5b5f61234f84828501612319565b91505092915050565b5f60408201905061236b5f830185611b90565b6123786020830184611b5f565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6123d9602683611f11565b91506123e48261237f565b604082019050919050565b5f6020820190508181035f830152612406816123cd565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f612467602e83611f11565b91506124728261240d565b604082019050919050565b5f6020820190508181035f8301526124948161245b565b9050919050565b5f819050919050565b5f819050919050565b5f6124c76124c26124bd8461249b565b6124a4565b611b53565b9050919050565b6124d7816124ad565b82525050565b5f6020820190506124f05f8301846124ce565b92915050565b5f8151905061250481611afe565b92915050565b5f6020828403121561251f5761251e611877565b5b5f61252c848285016124f6565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e746174695f8201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b5f61258f602e83611f11565b915061259a82612535565b604082019050919050565b5f6020820190508181035f8301526125bc81612583565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f785f8201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b5f61261d602983611f11565b9150612628826125c3565b604082019050919050565b5f6020820190508181035f83015261264a81612611565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612685602083611f11565b915061269082612651565b602082019050919050565b5f6020820190508181035f8301526126b281612679565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f6126ed601f83611f11565b91506126f8826126b9565b602082019050919050565b5f6020820190508181035f83015261271a816126e1565b9050919050565b7f5061757361626c653a20706175736564000000000000000000000000000000005f82015250565b5f612755601083611f11565b915061276082612721565b602082019050919050565b5f6020820190508181035f83015261278281612749565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6127c082611b87565b91506127cb83611b87565b92508282026127d981611b87565b915082820484148315176127f0576127ef612789565b5b5092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f612851602b83611f11565b915061285c826127f7565b604082019050919050565b5f6020820190508181035f83015261287e81612845565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f6128df602d83611f11565b91506128ea82612885565b604082019050919050565b5f6020820190508181035f83015261290c816128d3565b9050919050565b5f81519050919050565b8281835e5f83830152505050565b5f61293582612913565b61293f818561203d565b935061294f81856020860161291d565b80840191505092915050565b5f612966828461292b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000005f82015250565b5f6129a5601d83611f11565b91506129b082612971565b602082019050919050565b5f6020820190508181035f8301526129d281612999565b9050919050565b5f81519050919050565b5f6129ed826129d9565b6129f78185611f11565b9350612a0781856020860161291d565b612a108161190c565b840191505092915050565b5f6020820190508181035f830152612a3381846129e3565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122019adda7433338c09b7b79bb110eaa98ba0f4e7b63aaeee6200227443b38acc0e64736f6c634300081a0033",
}

// PriceFeedContractABI is the input ABI used to generate the binding from.
// Deprecated: Use PriceFeedContractMetaData.ABI instead.
var PriceFeedContractABI = PriceFeedContractMetaData.ABI

// PriceFeedContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PriceFeedContractMetaData.Bin instead.
var PriceFeedContractBin = PriceFeedContractMetaData.Bin

// DeployPriceFeedContract deploys a new Ethereum contract, binding an instance of PriceFeedContract to it.
func DeployPriceFeedContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PriceFeedContract, error) {
	parsed, err := PriceFeedContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PriceFeedContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PriceFeedContract{PriceFeedContractCaller: PriceFeedContractCaller{contract: contract}, PriceFeedContractTransactor: PriceFeedContractTransactor{contract: contract}, PriceFeedContractFilterer: PriceFeedContractFilterer{contract: contract}}, nil
}

// PriceFeedContract is an auto generated Go binding around an Ethereum contract.
type PriceFeedContract struct {
	PriceFeedContractCaller     // Read-only binding to the contract
	PriceFeedContractTransactor // Write-only binding to the contract
	PriceFeedContractFilterer   // Log filterer for contract events
}

// PriceFeedContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type PriceFeedContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PriceFeedContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PriceFeedContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PriceFeedContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PriceFeedContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PriceFeedContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PriceFeedContractSession struct {
	Contract     *PriceFeedContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PriceFeedContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PriceFeedContractCallerSession struct {
	Contract *PriceFeedContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// PriceFeedContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PriceFeedContractTransactorSession struct {
	Contract     *PriceFeedContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// PriceFeedContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type PriceFeedContractRaw struct {
	Contract *PriceFeedContract // Generic contract binding to access the raw methods on
}

// PriceFeedContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PriceFeedContractCallerRaw struct {
	Contract *PriceFeedContractCaller // Generic read-only contract binding to access the raw methods on
}

// PriceFeedContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PriceFeedContractTransactorRaw struct {
	Contract *PriceFeedContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPriceFeedContract creates a new instance of PriceFeedContract, bound to a specific deployed contract.
func NewPriceFeedContract(address common.Address, backend bind.ContractBackend) (*PriceFeedContract, error) {
	contract, err := bindPriceFeedContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContract{PriceFeedContractCaller: PriceFeedContractCaller{contract: contract}, PriceFeedContractTransactor: PriceFeedContractTransactor{contract: contract}, PriceFeedContractFilterer: PriceFeedContractFilterer{contract: contract}}, nil
}

// NewPriceFeedContractCaller creates a new read-only instance of PriceFeedContract, bound to a specific deployed contract.
func NewPriceFeedContractCaller(address common.Address, caller bind.ContractCaller) (*PriceFeedContractCaller, error) {
	contract, err := bindPriceFeedContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractCaller{contract: contract}, nil
}

// NewPriceFeedContractTransactor creates a new write-only instance of PriceFeedContract, bound to a specific deployed contract.
func NewPriceFeedContractTransactor(address common.Address, transactor bind.ContractTransactor) (*PriceFeedContractTransactor, error) {
	contract, err := bindPriceFeedContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractTransactor{contract: contract}, nil
}

// NewPriceFeedContractFilterer creates a new log filterer instance of PriceFeedContract, bound to a specific deployed contract.
func NewPriceFeedContractFilterer(address common.Address, filterer bind.ContractFilterer) (*PriceFeedContractFilterer, error) {
	contract, err := bindPriceFeedContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractFilterer{contract: contract}, nil
}

// bindPriceFeedContract binds a generic wrapper to an already deployed contract.
func bindPriceFeedContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PriceFeedContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PriceFeedContract *PriceFeedContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PriceFeedContract.Contract.PriceFeedContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PriceFeedContract *PriceFeedContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.PriceFeedContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PriceFeedContract *PriceFeedContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.PriceFeedContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PriceFeedContract *PriceFeedContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PriceFeedContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PriceFeedContract *PriceFeedContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PriceFeedContract *PriceFeedContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.contract.Transact(opts, method, params...)
}

// Decimals is a free data retrieval call binding the contract method 0x5f18aa0c.
//
// Solidity: function decimals(bytes32 ) view returns(uint8)
func (_PriceFeedContract *PriceFeedContractCaller) Decimals(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _PriceFeedContract.contract.Call(opts, &out, "decimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x5f18aa0c.
//
// Solidity: function decimals(bytes32 ) view returns(uint8)
func (_PriceFeedContract *PriceFeedContractSession) Decimals(arg0 [32]byte) (uint8, error) {
	return _PriceFeedContract.Contract.Decimals(&_PriceFeedContract.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x5f18aa0c.
//
// Solidity: function decimals(bytes32 ) view returns(uint8)
func (_PriceFeedContract *PriceFeedContractCallerSession) Decimals(arg0 [32]byte) (uint8, error) {
	return _PriceFeedContract.Contract.Decimals(&_PriceFeedContract.CallOpts, arg0)
}

// FeePerAsset is a free data retrieval call binding the contract method 0x6eefe8fa.
//
// Solidity: function feePerAsset() view returns(uint256)
func (_PriceFeedContract *PriceFeedContractCaller) FeePerAsset(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PriceFeedContract.contract.Call(opts, &out, "feePerAsset")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeePerAsset is a free data retrieval call binding the contract method 0x6eefe8fa.
//
// Solidity: function feePerAsset() view returns(uint256)
func (_PriceFeedContract *PriceFeedContractSession) FeePerAsset() (*big.Int, error) {
	return _PriceFeedContract.Contract.FeePerAsset(&_PriceFeedContract.CallOpts)
}

// FeePerAsset is a free data retrieval call binding the contract method 0x6eefe8fa.
//
// Solidity: function feePerAsset() view returns(uint256)
func (_PriceFeedContract *PriceFeedContractCallerSession) FeePerAsset() (*big.Int, error) {
	return _PriceFeedContract.Contract.FeePerAsset(&_PriceFeedContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PriceFeedContract *PriceFeedContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PriceFeedContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PriceFeedContract *PriceFeedContractSession) Owner() (common.Address, error) {
	return _PriceFeedContract.Contract.Owner(&_PriceFeedContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PriceFeedContract *PriceFeedContractCallerSession) Owner() (common.Address, error) {
	return _PriceFeedContract.Contract.Owner(&_PriceFeedContract.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PriceFeedContract *PriceFeedContractCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _PriceFeedContract.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PriceFeedContract *PriceFeedContractSession) Paused() (bool, error) {
	return _PriceFeedContract.Contract.Paused(&_PriceFeedContract.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PriceFeedContract *PriceFeedContractCallerSession) Paused() (bool, error) {
	return _PriceFeedContract.Contract.Paused(&_PriceFeedContract.CallOpts)
}

// Prices is a free data retrieval call binding the contract method 0x60846bc6.
//
// Solidity: function prices(bytes32 ) view returns(uint256)
func (_PriceFeedContract *PriceFeedContractCaller) Prices(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _PriceFeedContract.contract.Call(opts, &out, "prices", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Prices is a free data retrieval call binding the contract method 0x60846bc6.
//
// Solidity: function prices(bytes32 ) view returns(uint256)
func (_PriceFeedContract *PriceFeedContractSession) Prices(arg0 [32]byte) (*big.Int, error) {
	return _PriceFeedContract.Contract.Prices(&_PriceFeedContract.CallOpts, arg0)
}

// Prices is a free data retrieval call binding the contract method 0x60846bc6.
//
// Solidity: function prices(bytes32 ) view returns(uint256)
func (_PriceFeedContract *PriceFeedContractCallerSession) Prices(arg0 [32]byte) (*big.Int, error) {
	return _PriceFeedContract.Contract.Prices(&_PriceFeedContract.CallOpts, arg0)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PriceFeedContract *PriceFeedContractCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PriceFeedContract.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PriceFeedContract *PriceFeedContractSession) ProxiableUUID() ([32]byte, error) {
	return _PriceFeedContract.Contract.ProxiableUUID(&_PriceFeedContract.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PriceFeedContract *PriceFeedContractCallerSession) ProxiableUUID() ([32]byte, error) {
	return _PriceFeedContract.Contract.ProxiableUUID(&_PriceFeedContract.CallOpts)
}

// TrustedSigner is a free data retrieval call binding the contract method 0xf74d5480.
//
// Solidity: function trustedSigner() view returns(address)
func (_PriceFeedContract *PriceFeedContractCaller) TrustedSigner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PriceFeedContract.contract.Call(opts, &out, "trustedSigner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedSigner is a free data retrieval call binding the contract method 0xf74d5480.
//
// Solidity: function trustedSigner() view returns(address)
func (_PriceFeedContract *PriceFeedContractSession) TrustedSigner() (common.Address, error) {
	return _PriceFeedContract.Contract.TrustedSigner(&_PriceFeedContract.CallOpts)
}

// TrustedSigner is a free data retrieval call binding the contract method 0xf74d5480.
//
// Solidity: function trustedSigner() view returns(address)
func (_PriceFeedContract *PriceFeedContractCallerSession) TrustedSigner() (common.Address, error) {
	return _PriceFeedContract.Contract.TrustedSigner(&_PriceFeedContract.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xfe4b84df.
//
// Solidity: function initialize(uint256 _newFeePerAsset) returns()
func (_PriceFeedContract *PriceFeedContractTransactor) Initialize(opts *bind.TransactOpts, _newFeePerAsset *big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "initialize", _newFeePerAsset)
}

// Initialize is a paid mutator transaction binding the contract method 0xfe4b84df.
//
// Solidity: function initialize(uint256 _newFeePerAsset) returns()
func (_PriceFeedContract *PriceFeedContractSession) Initialize(_newFeePerAsset *big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Initialize(&_PriceFeedContract.TransactOpts, _newFeePerAsset)
}

// Initialize is a paid mutator transaction binding the contract method 0xfe4b84df.
//
// Solidity: function initialize(uint256 _newFeePerAsset) returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) Initialize(_newFeePerAsset *big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Initialize(&_PriceFeedContract.TransactOpts, _newFeePerAsset)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PriceFeedContract *PriceFeedContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PriceFeedContract *PriceFeedContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _PriceFeedContract.Contract.RenounceOwnership(&_PriceFeedContract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PriceFeedContract.Contract.RenounceOwnership(&_PriceFeedContract.TransactOpts)
}

// RequestPrices is a paid mutator transaction binding the contract method 0xb2ad4c2e.
//
// Solidity: function requestPrices(bytes32[] _assets, function _callback) payable returns()
func (_PriceFeedContract *PriceFeedContractTransactor) RequestPrices(opts *bind.TransactOpts, _assets [][32]byte, _callback [24]byte) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "requestPrices", _assets, _callback)
}

// RequestPrices is a paid mutator transaction binding the contract method 0xb2ad4c2e.
//
// Solidity: function requestPrices(bytes32[] _assets, function _callback) payable returns()
func (_PriceFeedContract *PriceFeedContractSession) RequestPrices(_assets [][32]byte, _callback [24]byte) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.RequestPrices(&_PriceFeedContract.TransactOpts, _assets, _callback)
}

// RequestPrices is a paid mutator transaction binding the contract method 0xb2ad4c2e.
//
// Solidity: function requestPrices(bytes32[] _assets, function _callback) payable returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) RequestPrices(_assets [][32]byte, _callback [24]byte) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.RequestPrices(&_PriceFeedContract.TransactOpts, _assets, _callback)
}

// SetFeePerAsset is a paid mutator transaction binding the contract method 0x6f1518f8.
//
// Solidity: function setFeePerAsset(uint256 _newFeePerAsset) returns()
func (_PriceFeedContract *PriceFeedContractTransactor) SetFeePerAsset(opts *bind.TransactOpts, _newFeePerAsset *big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "setFeePerAsset", _newFeePerAsset)
}

// SetFeePerAsset is a paid mutator transaction binding the contract method 0x6f1518f8.
//
// Solidity: function setFeePerAsset(uint256 _newFeePerAsset) returns()
func (_PriceFeedContract *PriceFeedContractSession) SetFeePerAsset(_newFeePerAsset *big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.SetFeePerAsset(&_PriceFeedContract.TransactOpts, _newFeePerAsset)
}

// SetFeePerAsset is a paid mutator transaction binding the contract method 0x6f1518f8.
//
// Solidity: function setFeePerAsset(uint256 _newFeePerAsset) returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) SetFeePerAsset(_newFeePerAsset *big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.SetFeePerAsset(&_PriceFeedContract.TransactOpts, _newFeePerAsset)
}

// SetTrustedSigner is a paid mutator transaction binding the contract method 0x56a1c701.
//
// Solidity: function setTrustedSigner(address _newSigner) returns()
func (_PriceFeedContract *PriceFeedContractTransactor) SetTrustedSigner(opts *bind.TransactOpts, _newSigner common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "setTrustedSigner", _newSigner)
}

// SetTrustedSigner is a paid mutator transaction binding the contract method 0x56a1c701.
//
// Solidity: function setTrustedSigner(address _newSigner) returns()
func (_PriceFeedContract *PriceFeedContractSession) SetTrustedSigner(_newSigner common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.SetTrustedSigner(&_PriceFeedContract.TransactOpts, _newSigner)
}

// SetTrustedSigner is a paid mutator transaction binding the contract method 0x56a1c701.
//
// Solidity: function setTrustedSigner(address _newSigner) returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) SetTrustedSigner(_newSigner common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.SetTrustedSigner(&_PriceFeedContract.TransactOpts, _newSigner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PriceFeedContract *PriceFeedContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PriceFeedContract *PriceFeedContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.TransferOwnership(&_PriceFeedContract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.TransferOwnership(&_PriceFeedContract.TransactOpts, newOwner)
}

// UpdatePrice is a paid mutator transaction binding the contract method 0xe18e07cf.
//
// Solidity: function updatePrice(bytes32[] _assets, uint8[] _decimals, uint256[] _prices) returns()
func (_PriceFeedContract *PriceFeedContractTransactor) UpdatePrice(opts *bind.TransactOpts, _assets [][32]byte, _decimals []uint8, _prices []*big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "updatePrice", _assets, _decimals, _prices)
}

// UpdatePrice is a paid mutator transaction binding the contract method 0xe18e07cf.
//
// Solidity: function updatePrice(bytes32[] _assets, uint8[] _decimals, uint256[] _prices) returns()
func (_PriceFeedContract *PriceFeedContractSession) UpdatePrice(_assets [][32]byte, _decimals []uint8, _prices []*big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.UpdatePrice(&_PriceFeedContract.TransactOpts, _assets, _decimals, _prices)
}

// UpdatePrice is a paid mutator transaction binding the contract method 0xe18e07cf.
//
// Solidity: function updatePrice(bytes32[] _assets, uint8[] _decimals, uint256[] _prices) returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) UpdatePrice(_assets [][32]byte, _decimals []uint8, _prices []*big.Int) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.UpdatePrice(&_PriceFeedContract.TransactOpts, _assets, _decimals, _prices)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PriceFeedContract *PriceFeedContractTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PriceFeedContract *PriceFeedContractSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.UpgradeTo(&_PriceFeedContract.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.UpgradeTo(&_PriceFeedContract.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PriceFeedContract *PriceFeedContractTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PriceFeedContract *PriceFeedContractSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.UpgradeToAndCall(&_PriceFeedContract.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.UpgradeToAndCall(&_PriceFeedContract.TransactOpts, newImplementation, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_PriceFeedContract *PriceFeedContractTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PriceFeedContract.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_PriceFeedContract *PriceFeedContractSession) Withdraw() (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Withdraw(&_PriceFeedContract.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) Withdraw() (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Withdraw(&_PriceFeedContract.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_PriceFeedContract *PriceFeedContractTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _PriceFeedContract.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_PriceFeedContract *PriceFeedContractSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Fallback(&_PriceFeedContract.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Fallback(&_PriceFeedContract.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PriceFeedContract *PriceFeedContractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PriceFeedContract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PriceFeedContract *PriceFeedContractSession) Receive() (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Receive(&_PriceFeedContract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PriceFeedContract *PriceFeedContractTransactorSession) Receive() (*types.Transaction, error) {
	return _PriceFeedContract.Contract.Receive(&_PriceFeedContract.TransactOpts)
}

// PriceFeedContractAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the PriceFeedContract contract.
type PriceFeedContractAdminChangedIterator struct {
	Event *PriceFeedContractAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractAdminChanged represents a AdminChanged event raised by the PriceFeedContract contract.
type PriceFeedContractAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*PriceFeedContractAdminChangedIterator, error) {

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractAdminChangedIterator{contract: _PriceFeedContract.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *PriceFeedContractAdminChanged) (event.Subscription, error) {

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractAdminChanged)
				if err := _PriceFeedContract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseAdminChanged(log types.Log) (*PriceFeedContractAdminChanged, error) {
	event := new(PriceFeedContractAdminChanged)
	if err := _PriceFeedContract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the PriceFeedContract contract.
type PriceFeedContractBeaconUpgradedIterator struct {
	Event *PriceFeedContractBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractBeaconUpgraded represents a BeaconUpgraded event raised by the PriceFeedContract contract.
type PriceFeedContractBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*PriceFeedContractBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractBeaconUpgradedIterator{contract: _PriceFeedContract.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *PriceFeedContractBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractBeaconUpgraded)
				if err := _PriceFeedContract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseBeaconUpgraded(log types.Log) (*PriceFeedContractBeaconUpgraded, error) {
	event := new(PriceFeedContractBeaconUpgraded)
	if err := _PriceFeedContract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractFeeUpdatedIterator is returned from FilterFeeUpdated and is used to iterate over the raw logs and unpacked data for FeeUpdated events raised by the PriceFeedContract contract.
type PriceFeedContractFeeUpdatedIterator struct {
	Event *PriceFeedContractFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractFeeUpdated represents a FeeUpdated event raised by the PriceFeedContract contract.
type PriceFeedContractFeeUpdated struct {
	NewFeePerAsset *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterFeeUpdated is a free log retrieval operation binding the contract event 0x8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c76.
//
// Solidity: event FeeUpdated(uint256 newFeePerAsset)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterFeeUpdated(opts *bind.FilterOpts) (*PriceFeedContractFeeUpdatedIterator, error) {

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "FeeUpdated")
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractFeeUpdatedIterator{contract: _PriceFeedContract.contract, event: "FeeUpdated", logs: logs, sub: sub}, nil
}

// WatchFeeUpdated is a free log subscription operation binding the contract event 0x8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c76.
//
// Solidity: event FeeUpdated(uint256 newFeePerAsset)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchFeeUpdated(opts *bind.WatchOpts, sink chan<- *PriceFeedContractFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "FeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractFeeUpdated)
				if err := _PriceFeedContract.contract.UnpackLog(event, "FeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeUpdated is a log parse operation binding the contract event 0x8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c76.
//
// Solidity: event FeeUpdated(uint256 newFeePerAsset)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseFeeUpdated(log types.Log) (*PriceFeedContractFeeUpdated, error) {
	event := new(PriceFeedContractFeeUpdated)
	if err := _PriceFeedContract.contract.UnpackLog(event, "FeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PriceFeedContract contract.
type PriceFeedContractInitializedIterator struct {
	Event *PriceFeedContractInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractInitialized represents a Initialized event raised by the PriceFeedContract contract.
type PriceFeedContractInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterInitialized(opts *bind.FilterOpts) (*PriceFeedContractInitializedIterator, error) {

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractInitializedIterator{contract: _PriceFeedContract.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PriceFeedContractInitialized) (event.Subscription, error) {

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractInitialized)
				if err := _PriceFeedContract.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseInitialized(log types.Log) (*PriceFeedContractInitialized, error) {
	event := new(PriceFeedContractInitialized)
	if err := _PriceFeedContract.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PriceFeedContract contract.
type PriceFeedContractOwnershipTransferredIterator struct {
	Event *PriceFeedContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractOwnershipTransferred represents a OwnershipTransferred event raised by the PriceFeedContract contract.
type PriceFeedContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PriceFeedContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractOwnershipTransferredIterator{contract: _PriceFeedContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PriceFeedContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractOwnershipTransferred)
				if err := _PriceFeedContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseOwnershipTransferred(log types.Log) (*PriceFeedContractOwnershipTransferred, error) {
	event := new(PriceFeedContractOwnershipTransferred)
	if err := _PriceFeedContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the PriceFeedContract contract.
type PriceFeedContractPausedIterator struct {
	Event *PriceFeedContractPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractPaused represents a Paused event raised by the PriceFeedContract contract.
type PriceFeedContractPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterPaused(opts *bind.FilterOpts) (*PriceFeedContractPausedIterator, error) {

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractPausedIterator{contract: _PriceFeedContract.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *PriceFeedContractPaused) (event.Subscription, error) {

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractPaused)
				if err := _PriceFeedContract.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PriceFeedContract *PriceFeedContractFilterer) ParsePaused(log types.Log) (*PriceFeedContractPaused, error) {
	event := new(PriceFeedContractPaused)
	if err := _PriceFeedContract.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractPriceUpdatedIterator is returned from FilterPriceUpdated and is used to iterate over the raw logs and unpacked data for PriceUpdated events raised by the PriceFeedContract contract.
type PriceFeedContractPriceUpdatedIterator struct {
	Event *PriceFeedContractPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractPriceUpdated represents a PriceUpdated event raised by the PriceFeedContract contract.
type PriceFeedContractPriceUpdated struct {
	Asset   [32]byte
	Price   *big.Int
	Decimal uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPriceUpdated is a free log retrieval operation binding the contract event 0x8c62fe32113aae6ed87fdea7c7da35e9d2b99790bf4f577b0869fe9bbe12d58f.
//
// Solidity: event PriceUpdated(bytes32 indexed asset, uint256 price, uint8 decimal)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterPriceUpdated(opts *bind.FilterOpts, asset [][32]byte) (*PriceFeedContractPriceUpdatedIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "PriceUpdated", assetRule)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractPriceUpdatedIterator{contract: _PriceFeedContract.contract, event: "PriceUpdated", logs: logs, sub: sub}, nil
}

// WatchPriceUpdated is a free log subscription operation binding the contract event 0x8c62fe32113aae6ed87fdea7c7da35e9d2b99790bf4f577b0869fe9bbe12d58f.
//
// Solidity: event PriceUpdated(bytes32 indexed asset, uint256 price, uint8 decimal)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchPriceUpdated(opts *bind.WatchOpts, sink chan<- *PriceFeedContractPriceUpdated, asset [][32]byte) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "PriceUpdated", assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractPriceUpdated)
				if err := _PriceFeedContract.contract.UnpackLog(event, "PriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceUpdated is a log parse operation binding the contract event 0x8c62fe32113aae6ed87fdea7c7da35e9d2b99790bf4f577b0869fe9bbe12d58f.
//
// Solidity: event PriceUpdated(bytes32 indexed asset, uint256 price, uint8 decimal)
func (_PriceFeedContract *PriceFeedContractFilterer) ParsePriceUpdated(log types.Log) (*PriceFeedContractPriceUpdated, error) {
	event := new(PriceFeedContractPriceUpdated)
	if err := _PriceFeedContract.contract.UnpackLog(event, "PriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractPricesRequestedIterator is returned from FilterPricesRequested and is used to iterate over the raw logs and unpacked data for PricesRequested events raised by the PriceFeedContract contract.
type PriceFeedContractPricesRequestedIterator struct {
	Event *PriceFeedContractPricesRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractPricesRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractPricesRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractPricesRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractPricesRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractPricesRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractPricesRequested represents a PricesRequested event raised by the PriceFeedContract contract.
type PriceFeedContractPricesRequested struct {
	Requester common.Address
	Assets    [][32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPricesRequested is a free log retrieval operation binding the contract event 0xaa33eb4cfd36e0ee1d8d133a19a2620fb088f12c0141f8bc7e2d48c220be343f.
//
// Solidity: event PricesRequested(address indexed requester, bytes32[] assets)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterPricesRequested(opts *bind.FilterOpts, requester []common.Address) (*PriceFeedContractPricesRequestedIterator, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "PricesRequested", requesterRule)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractPricesRequestedIterator{contract: _PriceFeedContract.contract, event: "PricesRequested", logs: logs, sub: sub}, nil
}

// WatchPricesRequested is a free log subscription operation binding the contract event 0xaa33eb4cfd36e0ee1d8d133a19a2620fb088f12c0141f8bc7e2d48c220be343f.
//
// Solidity: event PricesRequested(address indexed requester, bytes32[] assets)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchPricesRequested(opts *bind.WatchOpts, sink chan<- *PriceFeedContractPricesRequested, requester []common.Address) (event.Subscription, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "PricesRequested", requesterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractPricesRequested)
				if err := _PriceFeedContract.contract.UnpackLog(event, "PricesRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePricesRequested is a log parse operation binding the contract event 0xaa33eb4cfd36e0ee1d8d133a19a2620fb088f12c0141f8bc7e2d48c220be343f.
//
// Solidity: event PricesRequested(address indexed requester, bytes32[] assets)
func (_PriceFeedContract *PriceFeedContractFilterer) ParsePricesRequested(log types.Log) (*PriceFeedContractPricesRequested, error) {
	event := new(PriceFeedContractPricesRequested)
	if err := _PriceFeedContract.contract.UnpackLog(event, "PricesRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractTrustedSignerUpdatedIterator is returned from FilterTrustedSignerUpdated and is used to iterate over the raw logs and unpacked data for TrustedSignerUpdated events raised by the PriceFeedContract contract.
type PriceFeedContractTrustedSignerUpdatedIterator struct {
	Event *PriceFeedContractTrustedSignerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractTrustedSignerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractTrustedSignerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractTrustedSignerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractTrustedSignerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractTrustedSignerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractTrustedSignerUpdated represents a TrustedSignerUpdated event raised by the PriceFeedContract contract.
type PriceFeedContractTrustedSignerUpdated struct {
	NewSigner common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTrustedSignerUpdated is a free log retrieval operation binding the contract event 0xced828023e9f94aa2a4373d4254f9bab903a9b34b822ab716d6c3688b2d0e17b.
//
// Solidity: event TrustedSignerUpdated(address newSigner)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterTrustedSignerUpdated(opts *bind.FilterOpts) (*PriceFeedContractTrustedSignerUpdatedIterator, error) {

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "TrustedSignerUpdated")
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractTrustedSignerUpdatedIterator{contract: _PriceFeedContract.contract, event: "TrustedSignerUpdated", logs: logs, sub: sub}, nil
}

// WatchTrustedSignerUpdated is a free log subscription operation binding the contract event 0xced828023e9f94aa2a4373d4254f9bab903a9b34b822ab716d6c3688b2d0e17b.
//
// Solidity: event TrustedSignerUpdated(address newSigner)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchTrustedSignerUpdated(opts *bind.WatchOpts, sink chan<- *PriceFeedContractTrustedSignerUpdated) (event.Subscription, error) {

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "TrustedSignerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractTrustedSignerUpdated)
				if err := _PriceFeedContract.contract.UnpackLog(event, "TrustedSignerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrustedSignerUpdated is a log parse operation binding the contract event 0xced828023e9f94aa2a4373d4254f9bab903a9b34b822ab716d6c3688b2d0e17b.
//
// Solidity: event TrustedSignerUpdated(address newSigner)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseTrustedSignerUpdated(log types.Log) (*PriceFeedContractTrustedSignerUpdated, error) {
	event := new(PriceFeedContractTrustedSignerUpdated)
	if err := _PriceFeedContract.contract.UnpackLog(event, "TrustedSignerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the PriceFeedContract contract.
type PriceFeedContractUnpausedIterator struct {
	Event *PriceFeedContractUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractUnpaused represents a Unpaused event raised by the PriceFeedContract contract.
type PriceFeedContractUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterUnpaused(opts *bind.FilterOpts) (*PriceFeedContractUnpausedIterator, error) {

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractUnpausedIterator{contract: _PriceFeedContract.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *PriceFeedContractUnpaused) (event.Subscription, error) {

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractUnpaused)
				if err := _PriceFeedContract.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseUnpaused(log types.Log) (*PriceFeedContractUnpaused, error) {
	event := new(PriceFeedContractUnpaused)
	if err := _PriceFeedContract.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PriceFeedContractUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the PriceFeedContract contract.
type PriceFeedContractUpgradedIterator struct {
	Event *PriceFeedContractUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PriceFeedContractUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PriceFeedContractUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PriceFeedContractUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PriceFeedContractUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PriceFeedContractUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PriceFeedContractUpgraded represents a Upgraded event raised by the PriceFeedContract contract.
type PriceFeedContractUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PriceFeedContract *PriceFeedContractFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*PriceFeedContractUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PriceFeedContract.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &PriceFeedContractUpgradedIterator{contract: _PriceFeedContract.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PriceFeedContract *PriceFeedContractFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *PriceFeedContractUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PriceFeedContract.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PriceFeedContractUpgraded)
				if err := _PriceFeedContract.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PriceFeedContract *PriceFeedContractFilterer) ParseUpgraded(log types.Log) (*PriceFeedContractUpgraded, error) {
	event := new(PriceFeedContractUpgraded)
	if err := _PriceFeedContract.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
